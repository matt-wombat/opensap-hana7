/* Create Sales Order with multiple line items*/
var body = $.request.body.asString();

var overallsoData = JSON.parse(body);

var responseBody = '';
var so_items;
var gross_amt = 0;
var prod_price = 0;
var lv_productid;
var lv_price;
var lv_quantity;
var lv_netamount;
var lv_taxamount;
var lv_grossamount;
var item_id = 10;
var lv_so_netamount = 0;
var lv_so_grossamount = 0;
var lv_so_taxamount = 0;
var i = 0;
var lv_bp_id;
var lv_company;
var lv_table;
var lv_tax = 0;
var result;
var rs, query, pc;
var taxCalculator;
var finalItemId;
responseBody += 'BP_ID:' + encodeURI(overallsoData.PARTNERID) + "\n";

var conn = $.hdb.getConnection();

//query = 'SELECT \"salesOrderId\".NEXTVAL as OverallId from Dummy';


//rs = conn.executeQuery(query);
//var overAllId = '';

/*if (rs.length > 0) {
    overAllId = rs[0].OVERALLID;
    responseBody += 'so id ' + overAllId + '\n';
}*/

//Get the company name for the BP id and store it in a local variable
lv_bp_id = encodeURI(overallsoData.PARTNERID);
//use prepared statement to avoid sql injection attacks
query = 'SELECT COMPANYNAME from "MD.BusinessPartner" where PARTNERID = ?';
rs = conn.executeQuery(query, lv_bp_id);

if (rs.length > 0) {
    lv_company = rs[0].COMPANYNAME;
    responseBody += 'lv_company ' + lv_company + '\n';
}

so_items = overallsoData.SalesOrderItems;


//Insert Sales Order Header
query = 'insert into \"SO.Header\"' 
        + '("HISTORY.CREATEDBY.EMPLOYEEID", "HISTORY.CREATEDAT", "HISTORY.CHANGEDBY.EMPLOYEEID", "HISTORY.CHANGEDAT",  "PARTNER", "CURRENCY", "GROSSAMOUNT", "NETAMOUNT", "TAXAMOUNT", "LIFECYCLESTATUS", "BILLINGSTATUS", "DELIVERYSTATUS") ' 
        + " values('0000000033',CURRENT_DATE,'0000000033',CURRENT_DATE, " 
        + "?,'EUR',?,?,?,'N','I','I')";

rs = conn.executeUpdate(query, overallsoData.PARTNERID,
                        lv_so_grossamount, lv_so_netamount, lv_so_taxamount);


//Insert all Sales Order Items
if (so_items) {

    for (i; i < so_items.length; i++) {
        responseBody += 'item' + i + ' ' + 'Product_Id:' + so_items[i].Product_Id;
        responseBody += 'item' + i + ' ' + 'Quantity:' + so_items[i].Quantity;

        lv_productid = encodeURI(so_items[i].Product_Id);
        lv_quantity = encodeURI(so_items[i].Quantity);
        // Get price of the product from Product table
        query = 'SELECT PRICE from "MD.Products" where PRODUCTID = ?';
        rs = conn.executeQuery(query, lv_productid);

        if (rs.length > 0) {
            lv_price = rs[0].PRICE;
            responseBody += 'lv_price ' + lv_price + '\n';
        }

        //create local temporary table to pass as input to the Decision Table Procedure for Tax calculation
        query = "create local temporary table #TT_IN(PARTNERID nvarchar(10),COMPANYNAME nvarchar(80),PRODUCTID nvarchar(10))";
        conn.executeUpdate(query);

        //Insert values into the local temporary table for bp id,company name and product id for the tax calculation
        try {
            query = "insert into #TT_IN values (?,?,?)";
            conn.executeUpdate(query, lv_bp_id, lv_company, lv_productid);
        } catch (e) {
            result += e.toString();
        }

        //Call the Procedure for Tax Calculation generated by the Decision Table
        taxCalculator = conn.loadProcedure('', 'DT_TAX_CALCULATION');

        rs = taxCalculator([{PARTNERID: lv_bp_id, COMPANYNAME: lv_company, PRODUCTID: lv_productid}]);

        //Get the temporary output table name    
        if (rs.length > 0) {
            // lv_table = rs[i].table;
            lv_tax = rs[0].RETURNED_TT.TAX;
            responseBody += 'lv_tax ' + lv_tax + '\n';
        }

        lv_netamount = lv_price * lv_quantity;
        //Get the tax amount based on the tax code
        lv_taxamount = lv_netamount * lv_tax;
        lv_grossamount = lv_netamount + lv_taxamount;
        //Insert Item into table
        query = 'insert into "SO.Item"' + " values(CURRENT_IDENTITY_VALUE(),?,'','EUR',?,?,?,'I','',?,'EA','')";
       /* finalItemId = '';
        if (item_id >= 100) {
            finalItemId = '0000000' + item_id;
        } else {
            finalItemId = '00000000' + item_id;
        }*/

        rs = conn.executeUpdate(query, lv_productid, lv_grossamount,
                                lv_netamount, lv_taxamount, lv_quantity);

       // item_id = item_id + 10;

        //Calculate the total of net amount, gross amount and tax amount for all line items
        lv_so_netamount = lv_so_netamount + lv_netamount;
        lv_so_grossamount = lv_so_grossamount + lv_grossamount;
        lv_so_taxamount = lv_so_taxamount + lv_taxamount;

        //drop the local temporary table
        query = "drop table #TT_IN";
        rs = conn.executeUpdate(query);

    }

}


query = 'SELECT CURRENT_IDENTITY_VALUE() as OverallId from Dummy';


rs = conn.executeQuery(query);
var overAllId = '';

if (rs.length > 0) {
    overAllId = rs[0].OVERALLID;
    responseBody += 'so id ' + overAllId + '\n';
}

conn.commit();
conn.close();

$.response.status = $.net.http.CREATED;
$.response.setBody(responseBody);